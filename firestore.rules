
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users: Can read their own profile, anyone can create a user profile (on signup)
    // Only the user can update or delete their own profile
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Products: Anyone can read products.
    // Only authenticated users who are the owners can create, update, or delete their products.
    match /products/{productId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Requests: Anyone can read public requests.
    // Authenticated users can create requests.
    // Only the user who created the request can update or delete it.
    match /requests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Offers/Proposals: Can only be created by authenticated users.
    // Reading/deleting would typically be handled by more complex rules,
    // but for now, we'll restrict it to the involved parties (requester/vendor).
    // This requires a function or more detailed checks, so we'll start with write access.
    match /offers/{offerId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.productOwnerId);
    }
     match /proposals/{proposalId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.vendorId);
    }
  }
}
