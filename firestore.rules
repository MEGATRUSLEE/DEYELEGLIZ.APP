rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Users can only read and write to their own document.
    // Anyone can create a user document (for signup).
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Products: Publicly readable. Only the owner can create, update, delete.
    match /products/{productId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Requests: Publicly readable. Only authenticated users can create. Only owner can delete.
    match /requests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow updates for increments (views, proposalCount) by any authenticated user
      allow update: if request.auth != null && (request.resource.data.keys().hasOnly(['views', 'proposalCount']) || request.auth.uid == resource.data.userId);
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Offers: Can only be read by buyer or seller. Only buyer can create. Only seller can update status.
    match /offers/{offerId} {
       allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.productOwnerId || request.auth.uid == resource.data.buyerId);
       allow create: if request.auth != null && request.auth.uid == request.resource.data.buyerId;
    }

    // Proposals: Can only be read by requester or vendor. Only vendor can create.
    match /proposals/{proposalId} {
       allow read, delete: if request.auth != null && (request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.vendorId);
       allow create: if request.auth != null && request.auth.uid == request.resource.data.vendorId;
    }
  }
}